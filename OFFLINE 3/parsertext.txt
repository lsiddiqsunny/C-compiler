Line at 1 : type_specifier	: INT

int 

Line at 1 : declaration_list->ID

x

Line at 1 : declaration_list->declaration_list COMMA ID

x,y

Line at 1 : declaration_list->declaration_list COMMA ID

x,y,z

Line at 1 : var_declaration->type_specifier declaration_list SEMICOLON

int  x,y,z;

Line at 1 : unit->var_declaration

int  x,y,z;

Line at 1 : program->unit

int  x,y,z;


Line at 1 : type_specifier	: FLOAT

float 

Line at 1 : declaration_list->ID

a

Line at 1 : var_declaration->type_specifier declaration_list SEMICOLON

float  a;

Line at 1 : unit->var_declaration

float  a;

Line at 1 : program->program unit

int  x,y,z;
 float  a;


Line at 3 : type_specifier	: VOID

void 

Line at 3 : func_declaration->type_specifier ID LPAREN RPAREN SEMICOLON

void  foo();

Line at 3 : unit->func_declaration

void  foo();

Line at 3 : program->program unit

int  x,y,z;
float  a;
 void  foo();


Line at 5 : type_specifier	: INT

int 

Line at 5 : type_specifier	: INT

int 

Line at 5 : parameter_list->type_specifier ID

int  a

Line at 5 : type_specifier	: INT

int 

Line at 5 : parameter_list->parameter_list COMMA type_specifier ID

int  a,int  b

 New ScopeTable with id 2 created

Line at 6 : variable->ID

a

Line at 6 : factor->variable

a

Line at 6 : unary_expression->factor

a

Line at 6 : term->unary_expression

a

Line at 6 : simple_expression->term

a

Line at 6 : variable->ID

b

Line at 6 : factor->variable

b

Line at 6 : unary_expression->factor

b

Line at 6 : term->unary_expression

b

Line at 6 : simple_expression->simple_expression ADDOP term

a+b

Line at 6 : rel_expression->simple_expression

a+b

Line at 6 : logic_expression->rel_expression

a+b

Line at 6 : expression->logic_expression

a+b

Line at 6 : statement->RETURN expression SEMICOLON

return a+b;

Line at 6 : statements->statement

return a+b;

Line at 7 : compound_statement->LCURL statements RCURL

{return a+b;}

 ScopeTable# 2 
 51  --> < ID : a > 
 52  --> < ID : b > 

 ScopeTable# 1 
 21  --> < ID : foo > 
 44  --> < ID : var > 
 51  --> < ID : a > 
 74  --> < ID : x > 
 75  --> < ID : y > 
 76  --> < ID : z > 

 ScopeTable with id 2 removed

Line at 7 : func_definition->type_specifier ID LPAREN parameter_list RPAREN compound_statement 

int  var(int  a,int  b) {
return a+b;
} 

Line at 7 : unit->func_definition

int  var(int  a,int  b){
return a+b;
}

Line at 7 : program->program unit

int  x,y,z;
float  a;
void  foo();
 int  var(int  a,int  b){
return a+b;
}


Line at 9 : type_specifier	: VOID

void 

 New ScopeTable with id 3 created

Line at 10 : variable->ID

x

Line at 10 : factor->CONST_INT

2

Line at 10 : unary_expression->factor

2

Line at 10 : term->unary_expression

2

Line at 10 : simple_expression->term

2

Line at 10 : rel_expression->simple_expression

2

Line at 10 : logic_expression->rel_expression

2

Line at 10 : expression->variable ASSIGNOP logic_expression

x=2

Line at 10 : expression_statement->expression SEMICOLON

x=2;

Line at 10 : statement -> expression_statement

x=2;

Line at 10 : statements->statement

x=2;

Line at 11 : variable->ID

y

Line at 11 : variable->ID

x

Line at 11 : factor->variable

x

Line at 11 : unary_expression->factor

x

Line at 11 : term->unary_expression

x

Line at 11 : simple_expression->term

x

Line at 11 : factor->CONST_INT

5

Line at 11 : unary_expression->factor

5

Line at 11 : term->unary_expression

5

Line at 11 : simple_expression->simple_expression ADDOP term

x-5

Line at 11 : rel_expression->simple_expression

x-5

Line at 11 : logic_expression->rel_expression

x-5

Line at 11 : expression->variable ASSIGNOP logic_expression

y=x-5

Line at 11 : expression_statement->expression SEMICOLON

y=x-5;

Line at 11 : statement -> expression_statement

y=x-5;

Line at 11 : statements->statements statement

x=2; y=x-5;

Line at 12 : compound_statement->LCURL statements RCURL

{x=2;
y=x-5;}

 ScopeTable# 3 

 ScopeTable# 1 
 21  --> < ID : foo > 
 44  --> < ID : var > 
 51  --> < ID : a > 
 74  --> < ID : x > 
 75  --> < ID : y > 
 76  --> < ID : z > 

 ScopeTable with id 3 removed

Line at 12 : func_definition->type_specifier ID LPAREN RPAREN compound_statement

void  foo() {
x=2;
y=x-5;
}

Line at 12 : unit->func_definition

void  foo(){
x=2;
y=x-5;
}

Line at 12 : program->program unit

int  x,y,z;
float  a;
void  foo();
int  var(int  a,int  b){
return a+b;
}
 void  foo(){
x=2;
y=x-5;
}


Line at 14 : type_specifier	: INT

int 

 New ScopeTable with id 4 created

Line at 15 : type_specifier	: INT

int 

Line at 15 : declaration_list->ID LTHIRD CONST_INT RTHIRD

a[2]

Line at 15 : declaration_list->declaration_list COMMA ID

a[2],c

Line at 15 : declaration_list->declaration_list COMMA ID

a[2],c,i

Line at 15 : declaration_list->declaration_list COMMA ID

a[2],c,i,j

Line at 15 : var_declaration->type_specifier declaration_list SEMICOLON

int  a[2],c,i,j;

Line at 15 : statement -> var_declaration

int  a[2],c,i,j;

Line at 15 : statements->statement

int  a[2],c,i,j;

Line at 15 : type_specifier	: FLOAT

float 

Line at 15 : declaration_list->ID

d

Line at 15 : var_declaration->type_specifier declaration_list SEMICOLON

float  d;

Line at 15 : statement -> var_declaration

float  d;

Line at 15 : statements->statements statement

int  a[2],c,i,j; float  d;

Line at 16 : factor->CONST_INT

0

Line at 16 : unary_expression->factor

0

Line at 16 : term->unary_expression

0

Line at 16 : simple_expression->term

0

Line at 16 : rel_expression->simple_expression

0

Line at 16 : logic_expression->rel_expression

0

Line at 16 : expression->logic_expression

0

Line at 16 : variable->ID LTHIRD expression RTHIRD

a[0]

Line at 16 : factor->CONST_INT

1

Line at 16 : unary_expression->factor

1

Line at 16 : term->unary_expression

1

Line at 16 : simple_expression->term

1

Line at 16 : rel_expression->simple_expression

1

Line at 16 : logic_expression->rel_expression

1

Line at 16 : expression->variable ASSIGNOP logic_expression

a[0]=1

Line at 16 : expression_statement->expression SEMICOLON

a[0]=1;

Line at 16 : statement -> expression_statement

a[0]=1;

Line at 16 : statements->statements statement

int  a[2],c,i,j;
float  d; a[0]=1;

Line at 17 : factor->CONST_INT

1

Line at 17 : unary_expression->factor

1

Line at 17 : term->unary_expression

1

Line at 17 : simple_expression->term

1

Line at 17 : rel_expression->simple_expression

1

Line at 17 : logic_expression->rel_expression

1

Line at 17 : expression->logic_expression

1

Line at 17 : variable->ID LTHIRD expression RTHIRD

a[1]

Line at 17 : factor->CONST_INT

5

Line at 17 : unary_expression->factor

5

Line at 17 : term->unary_expression

5

Line at 17 : simple_expression->term

5

Line at 17 : rel_expression->simple_expression

5

Line at 17 : logic_expression->rel_expression

5

Line at 17 : expression->variable ASSIGNOP logic_expression

a[1]=5

Line at 17 : expression_statement->expression SEMICOLON

a[1]=5;

Line at 17 : statement -> expression_statement

a[1]=5;

Line at 17 : statements->statements statement

int  a[2],c,i,j;
float  d;
a[0]=1; a[1]=5;

Line at 18 : variable->ID

i

Line at 18 : factor->CONST_INT

0

Line at 18 : unary_expression->factor

0

Line at 18 : term->unary_expression

0

Line at 18 : simple_expression->term

0

Line at 18 : rel_expression->simple_expression

0

Line at 18 : logic_expression->rel_expression

0

Line at 18 : expression->logic_expression

0

Line at 18 : variable->ID LTHIRD expression RTHIRD

a[0]

Line at 18 : factor->variable

a[0]

Line at 18 : unary_expression->factor

a[0]

Line at 18 : term->unary_expression

a[0]

Line at 18 : simple_expression->term

a[0]

Line at 18 : factor->CONST_INT

1

Line at 18 : unary_expression->factor

1

Line at 18 : term->unary_expression

1

Line at 18 : simple_expression->term

1

Line at 18 : rel_expression->simple_expression

1

Line at 18 : logic_expression->rel_expression

1

Line at 18 : expression->logic_expression

1

Line at 18 : variable->ID LTHIRD expression RTHIRD

a[1]

Line at 18 : factor->variable

a[1]

Line at 18 : unary_expression->factor

a[1]

Line at 18 : term->unary_expression

a[1]

Line at 18 : simple_expression->simple_expression ADDOP term

a[0]+a[1]

Line at 18 : rel_expression->simple_expression

a[0]+a[1]

Line at 18 : logic_expression->rel_expression

a[0]+a[1]

Line at 18 : expression->variable ASSIGNOP logic_expression

i=a[0]+a[1]

Line at 18 : expression_statement->expression SEMICOLON

i=a[0]+a[1];

Line at 18 : statement -> expression_statement

i=a[0]+a[1];

Line at 18 : statements->statements statement

int  a[2],c,i,j;
float  d;
a[0]=1;
a[1]=5; i=a[0]+a[1];

Line at 19 : variable->ID

j

Line at 19 : factor->CONST_INT

2

Line at 19 : unary_expression->factor

2

Line at 19 : term->unary_expression

2

Line at 19 : factor->CONST_INT

3

Line at 19 : unary_expression->factor

3

Line at 19 : term->term MULOP unary_expression

2*3

Line at 19 : simple_expression->term

2*3

Line at 19 : factor->CONST_INT

5

Line at 19 : unary_expression->factor

5

Line at 19 : term->unary_expression

5

Line at 19 : factor->CONST_INT

3

Line at 19 : unary_expression->factor

3

Line at 19 : term->term MULOP unary_expression

5%3

Line at 19 : simple_expression->term

5%3

Line at 19 : factor->CONST_INT

4

Line at 19 : unary_expression->factor

4

Line at 19 : term->unary_expression

4

Line at 19 : simple_expression->term

4

Line at 19 : rel_expression->simple_expression RELOP simple_expression

5%3<4

Line at 19 : factor->CONST_INT

8

Line at 19 : unary_expression->factor

8

Line at 19 : term->unary_expression

8

Line at 19 : simple_expression->term

8

Line at 19 : rel_expression->simple_expression

8

Line at 19 : logic_expression->rel_expression LOGICOP rel_expression

5%3<4&&8

Line at 19 : expression->logic_expression

5%3<4&&8

Line at 19 : factor->LPAREN expression RPAREN

(5%3<4&&8)

Line at 19 : unary_expression->factor

(5%3<4&&8)

Line at 19 : term->unary_expression

(5%3<4&&8)

Line at 19 : simple_expression->simple_expression ADDOP term

2*3+(5%3<4&&8)

Line at 19 : rel_expression->simple_expression

2*3+(5%3<4&&8)

Line at 19 : factor->CONST_INT

2

Line at 19 : unary_expression->factor

2

Line at 19 : term->unary_expression

2

Line at 19 : simple_expression->term

2

Line at 19 : rel_expression->simple_expression

2

Line at 19 : logic_expression->rel_expression LOGICOP rel_expression

2*3+(5%3<4&&8)||2

Line at 19 : expression->variable ASSIGNOP logic_expression

j=2*3+(5%3<4&&8)||2

Line at 19 : expression_statement->expression SEMICOLON

j=2*3+(5%3<4&&8)||2;

Line at 19 : statement -> expression_statement

j=2*3+(5%3<4&&8)||2;

Line at 19 : statements->statements statement

int  a[2],c,i,j;
float  d;
a[0]=1;
a[1]=5;
i=a[0]+a[1]; j=2*3+(5%3<4&&8)||2;

Line at 20 : variable->ID

d

Line at 20 : factor->CONST_INT

1

Line at 20 : unary_expression->factor

1

Line at 20 : term->unary_expression

1

Line at 20 : simple_expression->term

1

Line at 20 : rel_expression->simple_expression

1

Line at 20 : logic_expression->rel_expression

1

Line at 20 : arguments->logic_expression

1

Line at 20 : factor->CONST_INT

2

Line at 20 : unary_expression->factor

2

Line at 20 : term->unary_expression

2

Line at 20 : factor->CONST_INT

3

Line at 20 : unary_expression->factor

3

Line at 20 : term->term MULOP unary_expression

2*3

Line at 20 : simple_expression->term

2*3

Line at 20 : rel_expression->simple_expression

2*3

Line at 20 : logic_expression->rel_expression

2*3

Line at 20 : arguments->arguments COMMA logic_expression 

1,2*3

Line at 20 : argument_list->arguments

1,2*3

Line at 20 : factor->ID LPAREN argument_list RPAREN

var(1,2*3)

Line at 20 : unary_expression->factor

var(1,2*3)

Line at 20 : term->unary_expression

var(1,2*3)

Line at 20 : simple_expression->term

var(1,2*3)

Line at 20 : factor->CONST_FLOAT

3.5

Line at 20 : unary_expression->factor

3.5

Line at 20 : term->unary_expression

3.5

Line at 20 : factor->CONST_INT

2

Line at 20 : unary_expression->factor

2

Line at 20 : term->term MULOP unary_expression

3.5*2

Line at 20 : simple_expression->simple_expression ADDOP term

var(1,2*3)+3.5*2

Line at 20 : rel_expression->simple_expression

var(1,2*3)+3.5*2

Line at 20 : logic_expression->rel_expression

var(1,2*3)+3.5*2

Line at 20 : expression->variable ASSIGNOP logic_expression

d=var(1,2*3)+3.5*2

Line at 20 : expression_statement->expression SEMICOLON

d=var(1,2*3)+3.5*2;

Line at 20 : statement -> expression_statement

d=var(1,2*3)+3.5*2;

Line at 20 : statements->statements statement

int  a[2],c,i,j;
float  d;
a[0]=1;
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2; d=var(1,2*3)+3.5*2;

Line at 21 : factor->CONST_INT

0

Line at 21 : unary_expression->factor

0

Line at 21 : term->unary_expression

0

Line at 21 : simple_expression->term

0

Line at 21 : rel_expression->simple_expression

0

Line at 21 : logic_expression->rel_expression

0

Line at 21 : expression->logic_expression

0

Line at 21 : statement->RETURN expression SEMICOLON

return 0;

Line at 21 : statements->statements statement

int  a[2],c,i,j;
float  d;
a[0]=1;
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2; return 0;

Line at 22 : compound_statement->LCURL statements RCURL

{int  a[2],c,i,j;
float  d;
a[0]=1;
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;}

 ScopeTable# 4 
 51  --> < ID : a > 
 53  --> < ID : c > 
 54  --> < ID : d > 
 59  --> < ID : i > 
 60  --> < ID : j > 

 ScopeTable# 1 
 21  --> < ID : foo > 
 44  --> < ID : var > 
 51  --> < ID : a > 
 64  --> < ID : main > 
 74  --> < ID : x > 
 75  --> < ID : y > 
 76  --> < ID : z > 

 ScopeTable with id 4 removed

Line at 22 : func_definition->type_specifier ID LPAREN RPAREN compound_statement

int  main() {
int  a[2],c,i,j;
float  d;
a[0]=1;
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;
}

Line at 22 : unit->func_definition

int  main(){
int  a[2],c,i,j;
float  d;
a[0]=1;
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;
}

Line at 22 : program->program unit

int  x,y,z;
float  a;
void  foo();
int  var(int  a,int  b){
return a+b;
}
void  foo(){
x=2;
y=x-5;
}
 int  main(){
int  a[2],c,i,j;
float  d;
a[0]=1;
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;
}


 Symbol Table : 

 ScopeTable# 1 
 21  --> < ID : foo > 
 44  --> < ID : var > 
 51  --> < ID : a > 
 64  --> < ID : main > 
 74  --> < ID : x > 
 75  --> < ID : y > 
 76  --> < ID : z > 

Total Lines : 22 

Total Errors : 0 

