Line at 1 : type_specifier	: INT

int 

Line at 1 : type_specifier	: INT

int 

Line at 1 : parameter_list->type_specifier ID

int  c

 New ScopeTable with id 2 created

Line at 2 : variable->ID

c

Line at 2 : factor->variable

c

Line at 2 : unary_expression->factor

c

Line at 2 : term->unary_expression

c

Line at 2 : simple_expression->term

c

Line at 2 : factor->CONST_INT

1

Line at 2 : unary_expression->factor

1

Line at 2 : term->unary_expression

1

Line at 2 : simple_expression->term

1

Line at 2 : rel_expression->simple_expression RELOP simple_expression

c==1

Line at 2 : logic_expression->rel_expression

c==1

Line at 2 : expression->logic_expression

c==1

Line at 2 : factor->CONST_INT

1

Line at 2 : unary_expression->factor

1

Line at 2 : term->unary_expression

1

Line at 2 : simple_expression->term

1

Line at 2 : rel_expression->simple_expression

1

Line at 2 : logic_expression->rel_expression

1

Line at 2 : expression->logic_expression

1

Line at 2 : statement->RETURN expression SEMICOLON

return 1;

Line at 3 : statement->IF LPAREN expression RPAREN statement

if(c==1)
return 1;

Line at 3 : statements->statement

if(c==1)
return 1;

Line at 3 : type_specifier	: INT

int 

Line at 3 : declaration_list->ID

a

Line at 3 : var_declaration->type_specifier declaration_list SEMICOLON

int  a;

Line at 3 : statement -> var_declaration

int  a;

Line at 3 : statements->statements statement

if(c==1)
return 1; int  a;

Line at 4 : variable->ID

a

Line at 4 : factor->CONST_INT

5

Line at 4 : unary_expression->factor

5

Line at 4 : term->unary_expression

5

Line at 4 : simple_expression->term

5

Line at 4 : rel_expression->simple_expression

5

Line at 4 : logic_expression->rel_expression

5

Line at 4 : expression->variable ASSIGNOP logic_expression

a=5

Line at 4 : expression_statement->expression SEMICOLON

a=5;

Line at 4 : statement -> expression_statement

a=5;

Line at 4 : statements->statements statement

if(c==1)
return 1;
int  a; a=5;

Line at 5 : variable->ID

a

Line at 5 : variable->ID

a

Line at 5 : factor->variable

a

Line at 5 : unary_expression->factor

a

Line at 5 : term->unary_expression

a

Line at 5 : simple_expression->term

a

Line at 5 : variable->ID

c

Line at 5 : factor->variable

c

Line at 5 : unary_expression->factor

c

Line at 5 : term->unary_expression

c

Line at 5 : simple_expression->term

c

Line at 5 : factor->CONST_INT

1

Line at 5 : unary_expression->factor

1

Line at 5 : term->unary_expression

1

Line at 5 : simple_expression->simple_expression ADDOP term

c-1

Line at 5 : rel_expression->simple_expression

c-1

Line at 5 : logic_expression->rel_expression

c-1

Line at 5 : arguments->logic_expression

c-1

Line at 5 : argument_list->arguments

c-1

Line at 5 : factor->ID LPAREN argument_list RPAREN

f(c-1)

Line at 5 : unary_expression->factor

f(c-1)

Line at 5 : term->unary_expression

f(c-1)

Line at 5 : simple_expression->simple_expression ADDOP term

a+f(c-1)

Line at 5 : rel_expression->simple_expression

a+f(c-1)

Line at 5 : logic_expression->rel_expression

a+f(c-1)

Line at 5 : expression->variable ASSIGNOP logic_expression

a=a+f(c-1)

Line at 5 : expression_statement->expression SEMICOLON

a=a+f(c-1);

Line at 5 : statement -> expression_statement

a=a+f(c-1);

Line at 5 : statements->statements statement

if(c==1)
return 1;
int  a;
a=5; a=a+f(c-1);

Line at 6 : type_specifier	: INT

int 

Line at 6 : declaration_list->ID

b

Line at 6 : var_declaration->type_specifier declaration_list SEMICOLON

int  b;

Line at 6 : statement -> var_declaration

int  b;

Line at 6 : statements->statements statement

if(c==1)
return 1;
int  a;
a=5;
a=a+f(c-1); int  b;

Line at 7 : variable->ID

b

Line at 7 : factor->CONST_INT

3

Line at 7 : unary_expression->factor

3

Line at 7 : term->unary_expression

3

Line at 7 : simple_expression->term

3

Line at 7 : rel_expression->simple_expression

3

Line at 7 : logic_expression->rel_expression

3

Line at 7 : expression->variable ASSIGNOP logic_expression

b=3

Line at 7 : expression_statement->expression SEMICOLON

b=3;

Line at 7 : statement -> expression_statement

b=3;

Line at 7 : statements->statements statement

if(c==1)
return 1;
int  a;
a=5;
a=a+f(c-1);
int  b; b=3;

Line at 8 : variable->ID

b

Line at 8 : factor->variable

b

Line at 8 : unary_expression->factor

b

Line at 8 : term->unary_expression

b

Line at 8 : variable->ID

a

Line at 8 : factor->variable

a

Line at 8 : unary_expression->factor

a

Line at 8 : term->term MULOP unary_expression

b*a

Line at 8 : simple_expression->term

b*a

Line at 8 : rel_expression->simple_expression

b*a

Line at 8 : logic_expression->rel_expression

b*a

Line at 8 : expression->logic_expression

b*a

Line at 8 : statement->RETURN expression SEMICOLON

return b*a;

Line at 8 : statements->statements statement

if(c==1)
return 1;
int  a;
a=5;
a=a+f(c-1);
int  b;
b=3; return b*a;

Line at 9 : compound_statement->LCURL statements RCURL

{if(c==1)
return 1;
int  a;
a=5;
a=a+f(c-1);
int  b;
b=3;
return b*a;}

 ScopeTable# 2 
 51  --> < ID : a > 
 52  --> < ID : b > 
 53  --> < ID : c > 

 ScopeTable# 1 
 56  --> < ID : f > 

 ScopeTable with id 2 removed

Line at 9 : func_definition->type_specifier ID LPAREN parameter_list RPAREN compound_statement 

int  f(int  c) {
if(c==1)
return 1;
int  a;
a=5;
a=a+f(c-1);
int  b;
b=3;
return b*a;
} 

Line at 9 : unit->func_definition

int  f(int  c){
if(c==1)
return 1;
int  a;
a=5;
a=a+f(c-1);
int  b;
b=3;
return b*a;
}

Line at 9 : program->unit

int  f(int  c){
if(c==1)
return 1;
int  a;
a=5;
a=a+f(c-1);
int  b;
b=3;
return b*a;
}


Line at 11 : type_specifier	: INT

int 

 New ScopeTable with id 3 created

Line at 13 : type_specifier	: INT

int 

Line at 13 : declaration_list->ID

a

Line at 13 : var_declaration->type_specifier declaration_list SEMICOLON

int  a;

Line at 13 : statement -> var_declaration

int  a;

Line at 13 : statements->statement

int  a;

Line at 14 : type_specifier	: INT

int 

Line at 14 : declaration_list->ID

b

Line at 14 : var_declaration->type_specifier declaration_list SEMICOLON

int  b;

Line at 14 : statement -> var_declaration

int  b;

Line at 14 : statements->statements statement

int  a; int  b;

Line at 15 : compound_statement->LCURL statements RCURL

{int  a;
int  b;}

 ScopeTable# 3 
 51  --> < ID : a > 
 52  --> < ID : b > 

 ScopeTable# 1 
 56  --> < ID : f > 
 57  --> < ID : g > 

 ScopeTable with id 3 removed

Line at 15 : func_definition->type_specifier ID LPAREN RPAREN compound_statement

int  g() {
int  a;
int  b;
}

Line at 15 : unit->func_definition

int  g(){
int  a;
int  b;
}

Line at 15 : program->program unit

int  f(int  c){
if(c==1)
return 1;
int  a;
a=5;
a=a+f(c-1);
int  b;
b=3;
return b*a;
}
 int  g(){
int  a;
int  b;
}


Line at 17 : type_specifier	: INT

int 

 New ScopeTable with id 4 created

Line at 18 : type_specifier	: INT

int 

Line at 18 : declaration_list->ID

x

Line at 18 : var_declaration->type_specifier declaration_list SEMICOLON

int  x;

Line at 18 : statement -> var_declaration

int  x;

Line at 18 : statements->statement

int  x;

Line at 19 : variable->ID

x

Line at 19 : factor->CONST_INT

3

Line at 19 : unary_expression->factor

3

Line at 19 : term->unary_expression

3

Line at 19 : simple_expression->term

3

Line at 19 : rel_expression->simple_expression

3

Line at 19 : logic_expression->rel_expression

3

Line at 19 : arguments->logic_expression

3

Line at 19 : argument_list->arguments

3

Line at 19 : factor->ID LPAREN argument_list RPAREN

f(3)

Line at 19 : unary_expression->factor

f(3)

Line at 19 : term->unary_expression

f(3)

Line at 19 : simple_expression->term

f(3)

Line at 19 : rel_expression->simple_expression

f(3)

Line at 19 : logic_expression->rel_expression

f(3)

Line at 19 : expression->variable ASSIGNOP logic_expression

x=f(3)

Line at 19 : expression_statement->expression SEMICOLON

x=f(3);

Line at 19 : statement -> expression_statement

x=f(3);

Line at 19 : statements->statements statement

int  x; x=f(3);

Line at 20 : statement->PRINTLN LPAREN ID RPAREN SEMICOLON


 (x);

Line at 20 : statements->statements statement

int  x;
x=f(3); println(x);

Line at 22 : compound_statement->LCURL statements RCURL

{int  x;
x=f(3);
println(x);}

 ScopeTable# 4 
 74  --> < ID : x > 

 ScopeTable# 1 
 56  --> < ID : f > 
 57  --> < ID : g > 
 64  --> < ID : main > 

 ScopeTable with id 4 removed

Line at 22 : func_definition->type_specifier ID LPAREN RPAREN compound_statement

int  main() {
int  x;
x=f(3);
println(x);
}

Line at 22 : unit->func_definition

int  main(){
int  x;
x=f(3);
println(x);
}

Line at 22 : program->program unit

int  f(int  c){
if(c==1)
return 1;
int  a;
a=5;
a=a+f(c-1);
int  b;
b=3;
return b*a;
}
int  g(){
int  a;
int  b;
}
 int  main(){
int  x;
x=f(3);
println(x);
}


 Symbol Table : 

 ScopeTable# 1 
 56  --> < ID : f > 
 57  --> < ID : g > 
 64  --> < ID : main > 

Total Lines : 22 

Total Errors : 0 

