Line at 1 : type_specifier	: INT

int 

 New ScopeTable with id 2 created

Line at 2 : type_specifier	: INT

int 

Line at 2 : declaration_list->ID

a

Line at 2 : declaration_list->declaration_list COMMA ID

a,b

Line at 2 : declaration_list->declaration_list COMMA ID

a,b,i

Line at 2 : var_declaration->type_specifier declaration_list SEMICOLON

int  a,b,i;

Line at 2 : statement -> var_declaration

int  a,b,i;

Line at 2 : statements->statement

int  a,b,i;

Line at 3 : variable->ID

b

Line at 3 : factor->CONST_INT

0

Line at 3 : unary_expression->factor

0

Line at 3 : term->unary_expression

0

Line at 3 : simple_expression->term

0

Line at 3 : rel_expression->simple_expression

0

Line at 3 : logic_expression->rel_expression

0

Line at 3 : expression->variable ASSIGNOP logic_expression

b=0

Line at 3 : expression_statement->expression SEMICOLON

b=0;

Line at 3 : statement -> expression_statement

b=0;

Line at 3 : statements->statements statement

int  a,b,i; b=0;

Line at 4 : variable->ID

i

Line at 4 : factor->CONST_INT

0

Line at 4 : unary_expression->factor

0

Line at 4 : term->unary_expression

0

Line at 4 : simple_expression->term

0

Line at 4 : rel_expression->simple_expression

0

Line at 4 : logic_expression->rel_expression

0

Line at 4 : expression->variable ASSIGNOP logic_expression

i=0

Line at 4 : expression_statement->expression SEMICOLON

i=0;

Line at 4 : variable->ID

i

Line at 4 : factor->variable

i

Line at 4 : unary_expression->factor

i

Line at 4 : term->unary_expression

i

Line at 4 : simple_expression->term

i

Line at 4 : factor->CONST_INT

4

Line at 4 : unary_expression->factor

4

Line at 4 : term->unary_expression

4

Line at 4 : simple_expression->term

4

Line at 4 : rel_expression->simple_expression RELOP simple_expression

i<4

Line at 4 : logic_expression->rel_expression

i<4

Line at 4 : expression->logic_expression

i<4

Line at 4 : expression_statement->expression SEMICOLON

i<4;

Line at 4 : variable->ID

i

Line at 4 : factor->variable INCOP

i++

Line at 4 : unary_expression->factor

i++

Line at 4 : term->unary_expression

i++

Line at 4 : simple_expression->term

i++

Line at 4 : rel_expression->simple_expression

i++

Line at 4 : logic_expression->rel_expression

i++

Line at 4 : expression->logic_expression

i++

 New ScopeTable with id 3 created

Line at 5 : variable->ID

a

Line at 5 : factor->CONST_INT

3

Line at 5 : unary_expression->factor

3

Line at 5 : term->unary_expression

3

Line at 5 : simple_expression->term

3

Line at 5 : rel_expression->simple_expression

3

Line at 5 : logic_expression->rel_expression

3

Line at 5 : expression->variable ASSIGNOP logic_expression

a=3

Line at 5 : expression_statement->expression SEMICOLON

a=3;

Line at 5 : statement -> expression_statement

a=3;

Line at 5 : statements->statement

a=3;

Line at 6 : variable->ID

a

Line at 6 : factor->variable DECOP

a--

Line at 6 : unary_expression->factor

a--

Line at 6 : term->unary_expression

a--

Line at 6 : simple_expression->term

a--

Line at 6 : rel_expression->simple_expression

a--

Line at 6 : logic_expression->rel_expression

a--

Line at 6 : expression->logic_expression

a--

 New ScopeTable with id 4 created

Line at 7 : variable->ID

b

Line at 7 : factor->variable INCOP

b++

Line at 7 : unary_expression->factor

b++

Line at 7 : term->unary_expression

b++

Line at 7 : simple_expression->term

b++

Line at 7 : rel_expression->simple_expression

b++

Line at 7 : logic_expression->rel_expression

b++

Line at 7 : expression->logic_expression

b++

Line at 7 : expression_statement->expression SEMICOLON

b++;

Line at 7 : statement -> expression_statement

b++;

Line at 7 : statements->statement

b++;

Line at 8 : compound_statement->LCURL statements RCURL

{b++;}

 ScopeTable# 4 

 ScopeTable# 3 

 ScopeTable# 2 
 51  --> < ID : a > 
 52  --> < ID : b > 
 59  --> < ID : i > 

 ScopeTable# 1 
 64  --> < ID : main > 

 ScopeTable with id 4 removed

Line at 8 : statement->compound_statement

{
b++;
}

Line at 8 : statement->WHILE LPAREN expression RPAREN statement

while(a--)
{
b++;
}

Line at 8 : statements->statements statement

a=3; while(a--)
{
b++;
}

Line at 9 : compound_statement->LCURL statements RCURL

{a=3;
while(a--)
{
b++;
}}

 ScopeTable# 3 

 ScopeTable# 2 
 51  --> < ID : a > 
 52  --> < ID : b > 
 59  --> < ID : i > 

 ScopeTable# 1 
 64  --> < ID : main > 

 ScopeTable with id 4 removed

Line at 9 : statement->compound_statement

{
a=3;
while(a--)
{
b++;
}
}

Line at 9 : statement ->FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(i=0; i<4; i++)
{
a=3;
while(a--)
{
b++;
}
} 

Line at 9 : statements->statements statement

int  a,b,i;
b=0; for(i=0;i<4;i++)
i++

Line at 10 : statement->PRINTLN LPAREN ID RPAREN SEMICOLON


 (a);

Line at 10 : statements->statements statement

int  a,b,i;
b=0;
for(i=0;i<4;i++)
i++ println(a)

Line at 11 : statement->PRINTLN LPAREN ID RPAREN SEMICOLON


 (b);

Line at 11 : statements->statements statement

int  a,b,i;
b=0;
for(i=0;i<4;i++)
i++
println(a) println(b)

Line at 12 : compound_statement->LCURL statements RCURL

{int  a,b,i;
b=0;
for(i=0;i<4;i++)
i++
println(a)
println(b)}

 ScopeTable# 2 
 51  --> < ID : a > 
 52  --> < ID : b > 
 59  --> < ID : i > 

 ScopeTable# 1 
 64  --> < ID : main > 

 ScopeTable with id 4 removed

Line at 12 : func_definition->type_specifier ID LPAREN RPAREN compound_statement

int  main() {
int  a,b,i;
b=0;
for(i=0;i<4;i++)
i++
println(a)
println(b)
}

Line at 12 : unit->func_definition

int  main(){
int  a,b,i;
b=0;
for(i=0;i<4;i++)
i++
println(a)
println(b)
}

Line at 12 : program->unit

int  main(){
int  a,b,i;
b=0;
for(i=0;i<4;i++)
i++
println(a)
println(b)
}


 Symbol Table : 

 ScopeTable# 1 
 64  --> < ID : main > 

Total Lines : 12 

Total Errors : 0 

