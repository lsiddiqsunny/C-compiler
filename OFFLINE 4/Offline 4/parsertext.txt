Line at 2 : type_specifier	: INT

int 

Line at 2 : type_specifier	: INT

int 

Line at 2 : parameter_list->type_specifier ID

int  a

Line at 2 : type_specifier	: INT

int 

Line at 2 : parameter_list->parameter_list COMMA type_specifier ID

int  a,int  b

 New ScopeTable with id 2 created

Line at 3 : variable->ID

b

Line at 3 : factor->variable

b

Line at 3 : unary_expression->factor

b

Line at 3 : term->unary_expression

b

Line at 3 : simple_expression->term

b

Line at 3 : factor->CONST_INT

1

Line at 3 : unary_expression->factor

1

Line at 3 : term->unary_expression

1

Line at 3 : simple_expression->term

1

Line at 3 : rel_expression->simple_expression RELOP simple_expression

b==1

Line at 3 : logic_expression->rel_expression

b==1

Line at 3 : expression->logic_expression

b==1

Line at 3 : factor->CONST_INT

1

Line at 3 : unary_expression->factor

1

Line at 3 : unary_expression->ADDOP unary_expression

-1

Line at 3 : term->unary_expression

-1

Line at 3 : simple_expression->term

-1

Line at 3 : rel_expression->simple_expression

-1

Line at 3 : logic_expression->rel_expression

-1

Line at 3 : expression->logic_expression

-1

Line at 3 : statement->RETURN expression SEMICOLON

return -1;

Line at 4 : statement->IF LPAREN expression RPAREN statement

if(b==1)
return -1;

Line at 4 : statements->statement

if(b==1)
return -1;

Line at 4 : variable->ID

a

Line at 4 : factor->variable

a

Line at 4 : unary_expression->factor

a

Line at 4 : term->unary_expression

a

Line at 4 : simple_expression->term

a

Line at 4 : variable->ID

b

Line at 4 : factor->variable

b

Line at 4 : unary_expression->factor

b

Line at 4 : term->unary_expression

b

Line at 4 : simple_expression->simple_expression ADDOP term

a+b

Line at 4 : rel_expression->simple_expression

a+b

Line at 4 : logic_expression->rel_expression

a+b

Line at 4 : arguments->logic_expression

a+b

Line at 4 : variable->ID

a

Line at 4 : factor->variable

a

Line at 4 : unary_expression->factor

a

Line at 4 : term->unary_expression

a

Line at 4 : simple_expression->term

a

Line at 4 : variable->ID

b

Line at 4 : factor->variable

b

Line at 4 : unary_expression->factor

b

Line at 4 : term->unary_expression

b

Line at 4 : simple_expression->simple_expression ADDOP term

a-b

Line at 4 : rel_expression->simple_expression

a-b

Line at 4 : logic_expression->rel_expression

a-b

Line at 4 : arguments->arguments COMMA logic_expression 

a+b,a-b

Line at 4 : argument_list->arguments

a+b,a-b

Line at 4 : factor->ID LPAREN argument_list RPAREN

h(a+b,a-b)

Line at 4 : unary_expression->factor

h(a+b,a-b)

Line at 4 : term->unary_expression

h(a+b,a-b)

Line at 4 : simple_expression->term

h(a+b,a-b)

Line at 4 : rel_expression->simple_expression

h(a+b,a-b)

Line at 4 : logic_expression->rel_expression

h(a+b,a-b)

Line at 4 : expression->logic_expression

h(a+b,a-b)

Line at 4 : statement->RETURN expression SEMICOLON

return h(a+b,a-b);

Line at 4 : statements->statements statement

if(b==1)
return -1; return h(a+b,a-b);

Line at 6 : compound_statement->LCURL statements RCURL

{if(b==1)
return -1;
return h(a+b,a-b);}

 ScopeTable# 2 
 51  --> < ID : a > 
 52  --> < ID : b > 

 ScopeTable# 1 
 58  --> < ID : h > 

 ScopeTable with id 2 removed

Line at 6 : func_definition->type_specifier ID LPAREN parameter_list RPAREN compound_statement 

int  h(int  a,int  b) {
if(b==1)
return -1;
return h(a+b,a-b);
} 

Line at 6 : unit->func_definition

int  h(int  a,int  b){
if(b==1)
return -1;
return h(a+b,a-b);
}

Line at 6 : program->unit

int  h(int  a,int  b){
if(b==1)
return -1;
return h(a+b,a-b);
}


Line at 7 : type_specifier	: INT

int 

 New ScopeTable with id 3 created

Line at 8 : type_specifier	: INT

int 

Line at 8 : declaration_list->ID

c

Line at 8 : declaration_list->declaration_list COMMA ID

c,i

Line at 8 : declaration_list->declaration_list COMMA ID

c,i,j

Line at 8 : var_declaration->type_specifier declaration_list SEMICOLON

int  c,i,j;

Line at 8 : statement -> var_declaration

int  c,i,j;

Line at 8 : statements->statement

int  c,i,j;

Line at 9 : variable->ID

i

Line at 9 : factor->CONST_INT

6

Line at 9 : unary_expression->factor

6

Line at 9 : term->unary_expression

6

Line at 9 : simple_expression->term

6

Line at 9 : rel_expression->simple_expression

6

Line at 9 : logic_expression->rel_expression

6

Line at 9 : expression->variable ASSIGNOP logic_expression

i=6

Line at 9 : expression_statement->expression SEMICOLON

i=6;

Line at 9 : statement -> expression_statement

i=6;

Line at 9 : statements->statements statement

int  c,i,j; i=6;

Line at 10 : variable->ID

j

Line at 10 : factor->CONST_INT

5

Line at 10 : unary_expression->factor

5

Line at 10 : term->unary_expression

5

Line at 10 : simple_expression->term

5

Line at 10 : rel_expression->simple_expression

5

Line at 10 : logic_expression->rel_expression

5

Line at 10 : expression->variable ASSIGNOP logic_expression

j=5

Line at 10 : expression_statement->expression SEMICOLON

j=5;

Line at 10 : statement -> expression_statement

j=5;

Line at 10 : statements->statements statement

int  c,i,j;
i=6; j=5;

Line at 12 : variable->ID

c

Line at 12 : variable->ID

i

Line at 12 : factor->variable

i

Line at 12 : unary_expression->factor

i

Line at 12 : term->unary_expression

i

Line at 12 : simple_expression->term

i

Line at 12 : rel_expression->simple_expression

i

Line at 12 : logic_expression->rel_expression

i

Line at 12 : arguments->logic_expression

i

Line at 12 : variable->ID

j

Line at 12 : factor->variable

j

Line at 12 : unary_expression->factor

j

Line at 12 : term->unary_expression

j

Line at 12 : simple_expression->term

j

Line at 12 : rel_expression->simple_expression

j

Line at 12 : logic_expression->rel_expression

j

Line at 12 : arguments->arguments COMMA logic_expression 

i,j

Line at 12 : argument_list->arguments

i,j

Line at 12 : factor->ID LPAREN argument_list RPAREN

h(i,j)

Line at 12 : unary_expression->factor

h(i,j)

Line at 12 : term->unary_expression

h(i,j)

Line at 12 : simple_expression->term

h(i,j)

Line at 12 : rel_expression->simple_expression

h(i,j)

Line at 12 : logic_expression->rel_expression

h(i,j)

Line at 12 : expression->variable ASSIGNOP logic_expression

c=h(i,j)

Line at 12 : expression_statement->expression SEMICOLON

c=h(i,j);

Line at 12 : statement -> expression_statement

c=h(i,j);

Line at 12 : statements->statements statement

int  c,i,j;
i=6;
j=5; c=h(i,j);

Line at 13 : statement->PRINTLN LPAREN ID RPAREN SEMICOLON


 (c);

Line at 13 : statements->statements statement

int  c,i,j;
i=6;
j=5;
c=h(i,j); println(c)

Line at 15 : factor->CONST_INT

0

Line at 15 : unary_expression->factor

0

Line at 15 : term->unary_expression

0

Line at 15 : simple_expression->term

0

Line at 15 : rel_expression->simple_expression

0

Line at 15 : logic_expression->rel_expression

0

Line at 15 : expression->logic_expression

0

Line at 15 : statement->RETURN expression SEMICOLON

return 0;

Line at 15 : statements->statements statement

int  c,i,j;
i=6;
j=5;
c=h(i,j);
println(c) return 0;

Line at 16 : compound_statement->LCURL statements RCURL

{int  c,i,j;
i=6;
j=5;
c=h(i,j);
println(c)
return 0;}

 ScopeTable# 3 
 53  --> < ID : c > 
 59  --> < ID : i > 
 60  --> < ID : j > 

 ScopeTable# 1 
 58  --> < ID : h > 
 64  --> < ID : main > 

 ScopeTable with id 3 removed

Line at 16 : func_definition->type_specifier ID LPAREN RPAREN compound_statement

int  main() {
int  c,i,j;
i=6;
j=5;
c=h(i,j);
println(c)
return 0;
}

Line at 16 : unit->func_definition

int  main(){
int  c,i,j;
i=6;
j=5;
c=h(i,j);
println(c)
return 0;
}

Line at 16 : program->program unit

int  h(int  a,int  b){
if(b==1)
return -1;
return h(a+b,a-b);
}
 int  main(){
int  c,i,j;
i=6;
j=5;
c=h(i,j);
println(c)
return 0;
}


 Symbol Table : 

 ScopeTable# 1 
 58  --> < ID : h > 
 64  --> < ID : main > 

Total Lines : 17 

Total Errors : 0 

