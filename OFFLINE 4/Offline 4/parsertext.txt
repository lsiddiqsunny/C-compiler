Line at 1 : type_specifier	: INT

int 

Line at 1 : type_specifier	: INT

int 

Line at 1 : parameter_list->type_specifier ID

int  a

Line at 1 : type_specifier	: INT

int 

Line at 1 : parameter_list->parameter_list COMMA type_specifier ID

int  a,int  b

Line at 1 : type_specifier	: INT

int 

Line at 1 : parameter_list->parameter_list COMMA type_specifier ID

int  a,int  b,int  c

 New ScopeTable with id 2 created

Line at 2 : variable->ID

a

Line at 2 : factor->variable

a

Line at 2 : unary_expression->factor

a

Line at 2 : term->unary_expression

a

Line at 2 : simple_expression->term

a

Line at 2 : factor->CONST_INT

1

Line at 2 : unary_expression->factor

1

Line at 2 : term->unary_expression

1

Line at 2 : simple_expression->term

1

Line at 2 : rel_expression->simple_expression RELOP simple_expression

a==1

Line at 2 : logic_expression->rel_expression

a==1

Line at 2 : expression->logic_expression

a==1

Line at 2 : factor->CONST_INT

1

Line at 2 : unary_expression->factor

1

Line at 2 : term->unary_expression

1

Line at 2 : simple_expression->term

1

Line at 2 : rel_expression->simple_expression

1

Line at 2 : logic_expression->rel_expression

1

Line at 2 : expression->logic_expression

1

Line at 2 : statement->RETURN expression SEMICOLON

return 1;

Line at 3 : statement->IF LPAREN expression RPAREN statement

if(a==1)
return 1;

Line at 3 : statements->statement

if(a==1)
return 1;

Line at 3 : variable->ID

a

Line at 3 : factor->variable

a

Line at 3 : unary_expression->factor

a

Line at 3 : term->unary_expression

a

Line at 3 : variable->ID

a

Line at 3 : factor->variable

a

Line at 3 : unary_expression->factor

a

Line at 3 : term->unary_expression

a

Line at 3 : simple_expression->term

a

Line at 3 : factor->CONST_INT

1

Line at 3 : unary_expression->factor

1

Line at 3 : term->unary_expression

1

Line at 3 : simple_expression->simple_expression ADDOP term

a-1

Line at 3 : rel_expression->simple_expression

a-1

Line at 3 : logic_expression->rel_expression

a-1

Line at 3 : arguments->logic_expression

a-1

Line at 3 : factor->CONST_INT

1

Line at 3 : unary_expression->factor

1

Line at 3 : term->unary_expression

1

Line at 3 : simple_expression->term

1

Line at 3 : rel_expression->simple_expression

1

Line at 3 : logic_expression->rel_expression

1

Line at 3 : arguments->arguments COMMA logic_expression 

a-1,1

Line at 3 : factor->CONST_INT

2

Line at 3 : unary_expression->factor

2

Line at 3 : term->unary_expression

2

Line at 3 : simple_expression->term

2

Line at 3 : rel_expression->simple_expression

2

Line at 3 : logic_expression->rel_expression

2

Line at 3 : arguments->arguments COMMA logic_expression 

a-1,1,2

Line at 3 : argument_list->arguments

a-1,1,2

Line at 3 : factor->ID LPAREN argument_list RPAREN

f(a-1,1,2)

Line at 3 : unary_expression->factor

f(a-1,1,2)

Line at 3 : term->term MULOP unary_expression

a*f(a-1,1,2)

Line at 3 : simple_expression->term

a*f(a-1,1,2)

Line at 3 : rel_expression->simple_expression

a*f(a-1,1,2)

Line at 3 : logic_expression->rel_expression

a*f(a-1,1,2)

Line at 3 : expression->logic_expression

a*f(a-1,1,2)

Line at 3 : statement->RETURN expression SEMICOLON

return a*f(a-1,1,2);

Line at 3 : statements->statements statement

if(a==1)
return 1; return a*f(a-1,1,2);

Line at 4 : compound_statement->LCURL statements RCURL

{if(a==1)
return 1;
return a*f(a-1,1,2);}

 ScopeTable# 2 
 51  --> < ID : a > 
 52  --> < ID : b > 
 53  --> < ID : c > 

 ScopeTable# 1 
 56  --> < ID : f > 

 ScopeTable with id 2 removed

Line at 4 : func_definition->type_specifier ID LPAREN parameter_list RPAREN compound_statement 

int  f(int  a,int  b,int  c) {
if(a==1)
return 1;
return a*f(a-1,1,2);
} 

Line at 4 : unit->func_definition

int  f(int  a,int  b,int  c){
if(a==1)
return 1;
return a*f(a-1,1,2);
}

Line at 4 : program->unit

int  f(int  a,int  b,int  c){
if(a==1)
return 1;
return a*f(a-1,1,2);
}


Line at 6 : type_specifier	: INT

int 

 New ScopeTable with id 3 created

Line at 8 : type_specifier	: INT

int 

Line at 8 : declaration_list->ID

a

Line at 8 : var_declaration->type_specifier declaration_list SEMICOLON

int  a;

Line at 8 : statement -> var_declaration

int  a;

Line at 8 : statements->statement

int  a;

Line at 9 : type_specifier	: INT

int 

Line at 9 : declaration_list->ID

b

Line at 9 : var_declaration->type_specifier declaration_list SEMICOLON

int  b;

Line at 9 : statement -> var_declaration

int  b;

Line at 9 : statements->statements statement

int  a; int  b;

Line at 10 : compound_statement->LCURL statements RCURL

{int  a;
int  b;}

 ScopeTable# 3 
 51  --> < ID : a > 
 52  --> < ID : b > 

 ScopeTable# 1 
 56  --> < ID : f > 
 57  --> < ID : g > 

 ScopeTable with id 3 removed

Line at 10 : func_definition->type_specifier ID LPAREN RPAREN compound_statement

int  g() {
int  a;
int  b;
}

Line at 10 : unit->func_definition

int  g(){
int  a;
int  b;
}

Line at 10 : program->program unit

int  f(int  a,int  b,int  c){
if(a==1)
return 1;
return a*f(a-1,1,2);
}
 int  g(){
int  a;
int  b;
}


Line at 12 : type_specifier	: INT

int 

 New ScopeTable with id 4 created

Line at 13 : type_specifier	: INT

int 

Line at 13 : declaration_list->ID

x

Line at 13 : declaration_list->declaration_list COMMA ID

x,y

Line at 13 : var_declaration->type_specifier declaration_list SEMICOLON

int  x,y;

Line at 13 : statement -> var_declaration

int  x,y;

Line at 13 : statements->statement

int  x,y;

Line at 14 : variable->ID

y

Line at 14 : factor->CONST_INT

6

Line at 14 : unary_expression->factor

6

Line at 14 : term->unary_expression

6

Line at 14 : simple_expression->term

6

Line at 14 : rel_expression->simple_expression

6

Line at 14 : logic_expression->rel_expression

6

Line at 14 : expression->variable ASSIGNOP logic_expression

y=6

Line at 14 : expression_statement->expression SEMICOLON

y=6;

Line at 14 : statement -> expression_statement

y=6;

Line at 14 : statements->statements statement

int  x,y; y=6;

Line at 15 : variable->ID

x

Line at 15 : variable->ID

y

Line at 15 : factor->variable

y

Line at 15 : unary_expression->factor

y

Line at 15 : term->unary_expression

y

Line at 15 : simple_expression->term

y

Line at 15 : rel_expression->simple_expression

y

Line at 15 : logic_expression->rel_expression

y

Line at 15 : arguments->logic_expression

y

Line at 15 : factor->CONST_INT

2

Line at 15 : unary_expression->factor

2

Line at 15 : term->unary_expression

2

Line at 15 : simple_expression->term

2

Line at 15 : rel_expression->simple_expression

2

Line at 15 : logic_expression->rel_expression

2

Line at 15 : arguments->arguments COMMA logic_expression 

y,2

Line at 15 : factor->CONST_INT

3

Line at 15 : unary_expression->factor

3

Line at 15 : term->unary_expression

3

Line at 15 : simple_expression->term

3

Line at 15 : rel_expression->simple_expression

3

Line at 15 : logic_expression->rel_expression

3

Line at 15 : arguments->arguments COMMA logic_expression 

y,2,3

Line at 15 : argument_list->arguments

y,2,3

Line at 15 : factor->ID LPAREN argument_list RPAREN

f(y,2,3)

Line at 15 : unary_expression->factor

f(y,2,3)

Line at 15 : term->unary_expression

f(y,2,3)

Line at 15 : simple_expression->term

f(y,2,3)

Line at 15 : rel_expression->simple_expression

f(y,2,3)

Line at 15 : logic_expression->rel_expression

f(y,2,3)

Line at 15 : expression->variable ASSIGNOP logic_expression

x=f(y,2,3)

Line at 15 : expression_statement->expression SEMICOLON

x=f(y,2,3);

Line at 15 : statement -> expression_statement

x=f(y,2,3);

Line at 15 : statements->statements statement

int  x,y;
y=6; x=f(y,2,3);

Line at 16 : statement->PRINTLN LPAREN ID RPAREN SEMICOLON


 (x);

Line at 16 : statements->statements statement

int  x,y;
y=6;
x=f(y,2,3); println(x);

Line at 17 : factor->CONST_INT

0

Line at 17 : unary_expression->factor

0

Line at 17 : term->unary_expression

0

Line at 17 : simple_expression->term

0

Line at 17 : rel_expression->simple_expression

0

Line at 17 : logic_expression->rel_expression

0

Line at 17 : expression->logic_expression

0

Line at 17 : statement->RETURN expression SEMICOLON

return 0;

Line at 17 : statements->statements statement

int  x,y;
y=6;
x=f(y,2,3);
println(x); return 0;

Line at 18 : compound_statement->LCURL statements RCURL

{int  x,y;
y=6;
x=f(y,2,3);
println(x);
return 0;}

 ScopeTable# 4 
 74  --> < ID : x > 
 75  --> < ID : y > 

 ScopeTable# 1 
 56  --> < ID : f > 
 57  --> < ID : g > 
 64  --> < ID : main > 

 ScopeTable with id 4 removed

Line at 18 : func_definition->type_specifier ID LPAREN RPAREN compound_statement

int  main() {
int  x,y;
y=6;
x=f(y,2,3);
println(x);
return 0;
}

Line at 18 : unit->func_definition

int  main(){
int  x,y;
y=6;
x=f(y,2,3);
println(x);
return 0;
}

Line at 18 : program->program unit

int  f(int  a,int  b,int  c){
if(a==1)
return 1;
return a*f(a-1,1,2);
}
int  g(){
int  a;
int  b;
}
 int  main(){
int  x,y;
y=6;
x=f(y,2,3);
println(x);
return 0;
}


 Symbol Table : 

 ScopeTable# 1 
 56  --> < ID : f > 
 57  --> < ID : g > 
 64  --> < ID : main > 

Total Lines : 18 

Total Errors : 0 

