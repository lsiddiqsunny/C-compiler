Line at 3 : type_specifier	: INT

int 

 New ScopeTable with id 2 created

Line at 4 : type_specifier	: INT

int 

Line at 4 : declaration_list->ID

c

Line at 4 : declaration_list->declaration_list COMMA ID

c,i

Line at 4 : declaration_list->declaration_list COMMA ID

c,i,j

Line at 4 : var_declaration->type_specifier declaration_list SEMICOLON

int  c,i,j;

Line at 4 : statement -> var_declaration

int  c,i,j;

Line at 4 : statements->statement

int  c,i,j;

Line at 5 : variable->ID

j

Line at 5 : factor->CONST_INT

5

Line at 5 : unary_expression->factor

5

Line at 5 : term->unary_expression

5

Line at 5 : simple_expression->term

5

Line at 5 : rel_expression->simple_expression

5

Line at 5 : logic_expression->rel_expression

5

Line at 5 : expression->variable ASSIGNOP logic_expression

j=5

Line at 5 : expression_statement->expression SEMICOLON

j=5;

Line at 5 : statement -> expression_statement

j=5;

Line at 5 : statements->statements statement

int  c,i,j; j=5;

Line at 6 : variable->ID

c

Line at 6 : factor->CONST_INT

0

Line at 6 : unary_expression->factor

0

Line at 6 : term->unary_expression

0

Line at 6 : simple_expression->term

0

Line at 6 : rel_expression->simple_expression

0

Line at 6 : logic_expression->rel_expression

0

Line at 6 : expression->variable ASSIGNOP logic_expression

c=0

Line at 6 : expression_statement->expression SEMICOLON

c=0;

Line at 6 : statement -> expression_statement

c=0;

Line at 6 : statements->statements statement

int  c,i,j;
j=5; c=0;

Line at 7 : variable->ID

i

Line at 7 : factor->CONST_INT

0

Line at 7 : unary_expression->factor

0

Line at 7 : term->unary_expression

0

Line at 7 : simple_expression->term

0

Line at 7 : rel_expression->simple_expression

0

Line at 7 : logic_expression->rel_expression

0

Line at 7 : expression->variable ASSIGNOP logic_expression

i=0

Line at 7 : expression_statement->expression SEMICOLON

i=0;

Line at 7 : statement -> expression_statement

i=0;

Line at 7 : statements->statements statement

int  c,i,j;
j=5;
c=0; i=0;

Line at 8 : variable->ID

i

Line at 8 : factor->variable

i

Line at 8 : unary_expression->factor

i

Line at 8 : term->unary_expression

i

Line at 8 : simple_expression->term

i

Line at 8 : variable->ID

j

Line at 8 : factor->variable

j

Line at 8 : unary_expression->factor

j

Line at 8 : term->unary_expression

j

Line at 8 : simple_expression->term

j

Line at 8 : rel_expression->simple_expression RELOP simple_expression

i<j

Line at 8 : logic_expression->rel_expression

i<j

Line at 8 : expression->logic_expression

i<j

 New ScopeTable with id 3 created

Line at 9 : variable->ID

c

Line at 9 : factor->CONST_INT

5

Line at 9 : unary_expression->factor

5

Line at 9 : term->unary_expression

5

Line at 9 : simple_expression->term

5

Line at 9 : rel_expression->simple_expression

5

Line at 9 : logic_expression->rel_expression

5

Line at 9 : expression->variable ASSIGNOP logic_expression

c=5

Line at 9 : expression_statement->expression SEMICOLON

c=5;

Line at 9 : statement -> expression_statement

c=5;

Line at 9 : statements->statement

c=5;

Line at 10 : compound_statement->LCURL statements RCURL

{c=5;}

 ScopeTable# 3 

 ScopeTable# 2 
 53  --> < ID : c > 
 59  --> < ID : i > 
 60  --> < ID : j > 

 ScopeTable# 1 
 64  --> < ID : main > 

 ScopeTable with id 3 removed

Line at 10 : statement->compound_statement

{
c=5;
}

 New ScopeTable with id 4 created

Line at 12 : variable->ID

c

Line at 12 : factor->CONST_INT

10

Line at 12 : unary_expression->factor

10

Line at 12 : term->unary_expression

10

Line at 12 : simple_expression->term

10

Line at 12 : rel_expression->simple_expression

10

Line at 12 : logic_expression->rel_expression

10

Line at 12 : expression->variable ASSIGNOP logic_expression

c=10

Line at 12 : expression_statement->expression SEMICOLON

c=10;

Line at 12 : statement -> expression_statement

c=10;

Line at 12 : statements->statement

c=10;

Line at 13 : compound_statement->LCURL statements RCURL

{c=10;}

 ScopeTable# 4 

 ScopeTable# 2 
 53  --> < ID : c > 
 59  --> < ID : i > 
 60  --> < ID : j > 

 ScopeTable# 1 
 64  --> < ID : main > 

 ScopeTable with id 4 removed

Line at 13 : statement->compound_statement

{
c=10;
}

Line at 13 : statement->IF LPAREN expression RPAREN statement ELSE statement

if(i<j)
{
c=5;
}
 else 
 {
c=10;
}

Line at 13 : statements->statements statement

int  c,i,j;
j=5;
c=0;
i=0; if(i<j)
{
c=5;
} else 
{
c=10;
}

Line at 14 : statement->PRINTLN LPAREN ID RPAREN SEMICOLON


 (c);

Line at 14 : statements->statements statement

int  c,i,j;
j=5;
c=0;
i=0;
if(i<j)
{
c=5;
} else 
{
c=10;
} 
(c)

Line at 16 : factor->CONST_INT

0

Line at 16 : unary_expression->factor

0

Line at 16 : term->unary_expression

0

Line at 16 : simple_expression->term

0

Line at 16 : rel_expression->simple_expression

0

Line at 16 : logic_expression->rel_expression

0

Line at 16 : expression->logic_expression

0

Line at 16 : statement->RETURN expression SEMICOLON

return 0;

Line at 16 : statements->statements statement

int  c,i,j;
j=5;
c=0;
i=0;
if(i<j)
{
c=5;
} else 
{
c=10;
}

(c) return 0;

Line at 17 : compound_statement->LCURL statements RCURL

{int  c,i,j;
j=5;
c=0;
i=0;
if(i<j)
{
c=5;
} else 
{
c=10;
}

(c)
return 0;}

 ScopeTable# 2 
 53  --> < ID : c > 
 59  --> < ID : i > 
 60  --> < ID : j > 

 ScopeTable# 1 
 64  --> < ID : main > 

 ScopeTable with id 4 removed

Line at 17 : func_definition->type_specifier ID LPAREN RPAREN compound_statement

int  main() {
int  c,i,j;
j=5;
c=0;
i=0;
if(i<j)
{
c=5;
} else 
{
c=10;
}

(c)
return 0;
}

Line at 17 : unit->func_definition

int  main(){
int  c,i,j;
j=5;
c=0;
i=0;
if(i<j)
{
c=5;
} else 
{
c=10;
}

(c)
return 0;
}

Line at 17 : program->unit

int  main(){
int  c,i,j;
j=5;
c=0;
i=0;
if(i<j)
{
c=5;
} else 
{
c=10;
}

(c)
return 0;
}


 Symbol Table : 

 ScopeTable# 1 
 64  --> < ID : main > 

Total Lines : 18 

Total Errors : 0 

