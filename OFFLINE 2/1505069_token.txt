<ID, option><ID, noyywrap><MULOP, %><LCURL, {><ID, include><RELOP, <><ID, stdio><ID, h><RELOP, >><ID, include><RELOP, <><ID, stdlib><ID, h><RELOP, >><ID, include><STRING, "1505069_SymbolTable.h"><INT><ID, line_count><ASSIGNOP, =><CONST_INT, 1><SEMICOLON, ;><INT><ID, error_count><ASSIGNOP, =><CONST_INT, 0><SEMICOLON, ;><ID, FILE><MULOP, *><ID, logout><ASSIGNOP, =><ID, fopen><LPAREN, (><STRING, "1505069_log.txt"><COMMA, ,><STRING, "w"><RPAREN, )><SEMICOLON, ;><ID, FILE><MULOP, *><ID, tokenout><ASSIGNOP, =><ID, fopen><LPAREN, (><STRING, "1505069_token.txt"><COMMA, ,><STRING, "w"><RPAREN, )><SEMICOLON, ;><ID, SymbolTable><ID, s><LPAREN, (><CONST_INT, 30><COMMA, ,><ID, logout><RPAREN, )><SEMICOLON, ;><ID, pair><RELOP, <><ID, string><COMMA, ,><INT><RELOP, >><ID, ModifyString><LPAREN, (><ID, string><ID, s><COMMA, ,><INT><ID, line><RPAREN, )><SEMICOLON, ;><MULOP, %><RCURL, }><ID, WHITESPACE><LTHIRD, [><ID, t><ID, f><ID, r><ID, v><RTHIRD, ]><ADDOP, +><ID, LETTER><LTHIRD, [><ID, a><ADDOP, -><ID, zA><ADDOP, -><ID, Z><RTHIRD, ]><ID, DIGIT><LTHIRD, [><CONST_INT, 0><ADDOP, -><CONST_INT, 9><RTHIRD, ]><ID, CHAR><LTHIRD, [><ADDOP, -><RTHIRD, ]><LCURL, {><ADDOP, -><RCURL, }><LTHIRD, [><ID, NEWLINE><LTHIRD, [><ID, n><RTHIRD, ]><MULOP, %><MULOP, %><LCURL, {><ID, WHITESPACE><RCURL, }><LCURL, {><RCURL, }><LCURL, {><ID, NEWLINE><RCURL, }><LCURL, {><ID, line_count><INCOP, ++><SEMICOLON, ;><RCURL, }><STRING, "if"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<IF>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <IF> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "else"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<ELSE>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <ELSE> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "for"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<FOR>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <FOR> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "while"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<WHILE>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <WHILE> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "do"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<DO>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <DO> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "break"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<FOR>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <FOR> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "int"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<INT>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <INT> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "char"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<CHAR>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <CHAR> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "float"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<FLOAT>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <FLOAT> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "double"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<DOUBLE>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <DOUBLE> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "void"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<VOID>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <VOID> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "return"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<RETURN>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <RETURN> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "switch"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<SWITCH>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <SWITCH> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "case"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<CASE>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <CASE> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "default"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<DEFAULT>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <DEFAULT> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "continue"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<CONTINUE>"><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <CONTINUE> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><LCURL, {><ID, DIGIT><RCURL, }><ADDOP, +><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<CONST_INT, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <CONST_INT> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, s><ID, Insert><LPAREN, (><ID, yytext><COMMA, ,><STRING, "CONST_INT"><RPAREN, )><SEMICOLON, ;><RCURL, }><LCURL, {><ID, DIGIT><RCURL, }><MULOP, *><LCURL, {><ID, DIGIT><RCURL, }><ADDOP, +><LPAREN, (><LTHIRD, [><ID, E><RTHIRD, ]><LTHIRD, [><ADDOP, -><ADDOP, +><RTHIRD, ]><LCURL, {><ID, DIGIT><RCURL, }><ADDOP, +><RPAREN, )><BITOP, |><LCURL, {><ID, DIGIT><RCURL, }><ADDOP, +><LPAREN, (><LTHIRD, [><ID, E><RTHIRD, ]><LTHIRD, [><ADDOP, -><ADDOP, +><RTHIRD, ]><LCURL, {><ID, DIGIT><RCURL, }><ADDOP, +><RPAREN, )><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<CONST_FLOAT, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <CONST_FLOAT> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, s><ID, Insert><LPAREN, (><ID, yytext><COMMA, ,><STRING, "CONST_FLOAT"><RPAREN, )><SEMICOLON, ;><RCURL, }><LCURL, {><ID, DIGIT><RCURL, }><MULOP, *><LPAREN, (><LTHIRD, [><RTHIRD, ]><ADDOP, +><LCURL, {><ID, DIGIT><RCURL, }><MULOP, *><RPAREN, )><ADDOP, +><LPAREN, (><ID, E><LTHIRD, [><RTHIRD, ]><MULOP, *><LTHIRD, [><ADDOP, +><ADDOP, -><RTHIRD, ]><LTHIRD, [><RTHIRD, ]><MULOP, *><LCURL, {><ID, DIGIT><RCURL, }><MULOP, *><RPAREN, )><LTHIRD, [><RTHIRD, ]><MULOP, *><LCURL, {><ID, DIGIT><RCURL, }><MULOP, *><LCURL, {><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Error at Line No.%d:  Too many decimal point %s 
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, error_count><INCOP, ++><SEMICOLON, ;><RCURL, }><LPAREN, (><LCURL, {><ID, DIGIT><RCURL, }><ADDOP, +><BITOP, |><LCURL, {><ID, DIGIT><RCURL, }><MULOP, *><LCURL, {><ID, DIGIT><RCURL, }><ADDOP, +><LPAREN, (><LTHIRD, [><ID, E><RTHIRD, ]><LTHIRD, [><ADDOP, -><ADDOP, +><RTHIRD, ]><LCURL, {><ID, DIGIT><RCURL, }><ADDOP, +><RPAREN, )><BITOP, |><LCURL, {><ID, DIGIT><RCURL, }><ADDOP, +><LPAREN, (><LTHIRD, [><ID, E><RTHIRD, ]><LTHIRD, [><ADDOP, -><ADDOP, +><RTHIRD, ]><LCURL, {><ID, DIGIT><RCURL, }><ADDOP, +><RPAREN, )><RPAREN, )><LTHIRD, [><ID, E><RTHIRD, ]><MULOP, *><LPAREN, (><LCURL, {><ID, DIGIT><RCURL, }><ADDOP, +><BITOP, |><LCURL, {><ID, DIGIT><RCURL, }><MULOP, *><LCURL, {><ID, DIGIT><RCURL, }><ADDOP, +><LPAREN, (><LTHIRD, [><ID, E><RTHIRD, ]><LTHIRD, [><ADDOP, -><ADDOP, +><RTHIRD, ]><LCURL, {><ID, DIGIT><RCURL, }><ADDOP, +><RPAREN, )><BITOP, |><LCURL, {><ID, DIGIT><RCURL, }><ADDOP, +><LPAREN, (><LTHIRD, [><ID, E><RTHIRD, ]><LTHIRD, [><ADDOP, -><ADDOP, +><RTHIRD, ]><LCURL, {><ID, DIGIT><RCURL, }><ADDOP, +><RPAREN, )><RPAREN, )><MULOP, *><LCURL, {><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Error at Line No.%d:  Ill formed number %s 
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, error_count><INCOP, ++><SEMICOLON, ;><RCURL, }><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<CONST_CHAR, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <CONST_CHAR> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, s><ID, Insert><LPAREN, (><ID, yytext><COMMA, ,><STRING, "CONST_CHAR"><RPAREN, )><SEMICOLON, ;><RCURL, }><ID, n><RTHIRD, ]><LCURL, {><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Error at Line No.%d: Unfinished Character Sequence found %s 
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, error_count><INCOP, ++><SEMICOLON, ;><RCURL, }><LCURL, {><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Error at Line No.%d: Invalid Character Sequence found %s 
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, error_count><INCOP, ++><SEMICOLON, ;><RCURL, }><STRING, "+"><BITOP, |><STRING, "-"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<ADDOP, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <ADDOP> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "*"><BITOP, |><STRING, "/"><BITOP, |><STRING, "%"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<MULOP, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <MULOP> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "++"><BITOP, |><STRING, "--"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<INCOP, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <INCOP> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "<"><BITOP, |><STRING, "<="><BITOP, |><STRING, ">"><BITOP, |><STRING, ">="><BITOP, |><STRING, "=="><BITOP, |><STRING, "!="><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<RELOP, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <RELOP> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "="><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<ASSIGNOP, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <ASSIGNOP> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "&&"><BITOP, |><STRING, "||"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<LOGICOP, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <LOGICOP> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "&"><BITOP, |><STRING, "|"><BITOP, |><STRING, "^"><BITOP, |><STRING, "<<"><BITOP, |><STRING, ">>"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<BITOP, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <BITOP> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "!"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<NOT, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <NOT> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "("><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<LPAREN, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <LPAREN> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, ")"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<RPAREN, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <RPAREN> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "{"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<LCURL, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <LCURL> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "}"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<RCURL, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <RCURL> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "["><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<LTHIRD, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <LTHIRD> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "]"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<RTHIRD, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <RTHIRD> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, ","><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<COMMA, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <COMMA> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, ";"><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<SEMICOLON, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <SEMICOLON> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><RCURL, }><STRING, "([^"><ID, n><RTHIRD, ]><BITOP, |><LPAREN, (><LTHIRD, [><ID, n><RTHIRD, ]><RPAREN, )><RPAREN, )><MULOP, *><ID, pair><RELOP, <><ID, string><COMMA, ,><INT><RELOP, >><ID, modify><ASSIGNOP, =><ID, ModifyString><LPAREN, (><ID, yytext><COMMA, ,><ID, line_count><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<STRING, %s>"><COMMA, ,><ID, modify><ID, first><ID, c_str><LPAREN, (><RPAREN, )><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <STRING> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, line_count><ASSIGNOP, =><ID, modify><ID, second><SEMICOLON, ;><RCURL, }><STRING, "([^"><ID, n><RTHIRD, ]><BITOP, |><LPAREN, (><LTHIRD, [><ID, n><RTHIRD, ]><RPAREN, )><RPAREN, )><MULOP, *><LCURL, {><ID, pair><RELOP, <><ID, string><COMMA, ,><INT><RELOP, >><ID, modify><ASSIGNOP, =><ID, ModifyString><LPAREN, (><ID, yytext><COMMA, ,><ID, line_count><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Error at Line No.%d:  Unfinished String found %s 
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, error_count><INCOP, ++><SEMICOLON, ;><ID, line_count><ASSIGNOP, =><ID, modify><ID, second><SEMICOLON, ;><RCURL, }><LPAREN, (><LCURL, {><ID, LETTER><RCURL, }><BITOP, |><ID, _><RPAREN, )><LPAREN, (><LCURL, {><ID, LETTER><RCURL, }><BITOP, |><LCURL, {><ID, DIGIT><RCURL, }><BITOP, |><ID, _><RPAREN, )><MULOP, *><LCURL, {><ID, fprintf><LPAREN, (><ID, tokenout><COMMA, ,><STRING, "<ID, %s>"><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <ID> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, s><ID, Insert><LPAREN, (><ID, yytext><COMMA, ,><STRING, "ID"><RPAREN, )><SEMICOLON, ;><RCURL, }><LCURL, {><ID, DIGIT><RCURL, }><LPAREN, (><LCURL, {><ID, LETTER><RCURL, }><BITOP, |><LCURL, {><ID, DIGIT><RCURL, }><BITOP, |><ID, _><RPAREN, )><MULOP, *><LCURL, {><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Error at Line No.%d:  Invalid Identifier %s 
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, error_count><INCOP, ++><SEMICOLON, ;><RCURL, }><STRING, "//"><LPAREN, (><LPAREN, (><MULOP, *><ID, n><MULOP, *><RPAREN, )><BITOP, |><LPAREN, (><MULOP, *><RPAREN, )><RPAREN, )><MULOP, *><LCURL, {><ID, pair><RELOP, <><ID, string><COMMA, ,><INT><RELOP, >><ID, modify><ASSIGNOP, =><ID, ModifyString><LPAREN, (><ID, yytext><COMMA, ,><ID, line_count><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <COMMENT> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, line_count><ASSIGNOP, =><ID, modify><ID, second><SEMICOLON, ;><RCURL, }><STRING, "/*"><LPAREN, (><LTHIRD, [><BITOP, ^><MULOP, *><RTHIRD, ]><BITOP, |><LPAREN, (><STRING, "*"><LTHIRD, [><BITOP, ^><MULOP, /><RTHIRD, ]><RPAREN, )><RPAREN, )><MULOP, *><STRING, "*/"><LCURL, {><ID, pair><RELOP, <><ID, string><COMMA, ,><INT><RELOP, >><ID, modify><ASSIGNOP, =><ID, ModifyString><LPAREN, (><ID, yytext><COMMA, ,><ID, line_count><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Line no %d: TOKEN <COMMENT> Lexeme %s found
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, line_count><ASSIGNOP, =><ID, modify><ID, second><SEMICOLON, ;><RCURL, }><STRING, "/*"><LPAREN, (><LTHIRD, [><BITOP, ^><MULOP, *><RTHIRD, ]><BITOP, |><LPAREN, (><STRING, "*"><LTHIRD, [><BITOP, ^><MULOP, /><RTHIRD, ]><RPAREN, )><RPAREN, )><MULOP, *><LTHIRD, [><BITOP, ^><STRING, "*/"><RTHIRD, ]><LCURL, {><ID, pair><RELOP, <><ID, string><COMMA, ,><INT><RELOP, >><ID, modify><ASSIGNOP, =><ID, ModifyString><LPAREN, (><ID, yytext><COMMA, ,><ID, line_count><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Error at Line No.%d:  Unfinished Comment %s 
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, line_count><ASSIGNOP, =><ID, modify><ID, second><SEMICOLON, ;><ID, error_count><INCOP, ++><SEMICOLON, ;><RCURL, }><LCURL, {><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "Error at Line No.%d:  Unrecognized character %s 
"><COMMA, ,><ID, line_count><COMMA, ,><ID, yytext><RPAREN, )><SEMICOLON, ;><ID, error_count><INCOP, ++><SEMICOLON, ;><RCURL, }><MULOP, %><MULOP, %><INT><ID, main><LPAREN, (><INT><ID, argc><COMMA, ,><CHAR><MULOP, *><ID, argv><LTHIRD, [><RTHIRD, ]><RPAREN, )><LCURL, {><IF><LPAREN, (><ID, argc><RELOP, !=><CONST_INT, 2><RPAREN, )><LCURL, {><ID, printf><LPAREN, (><STRING, "Please provide input file name and try again
"><RPAREN, )><SEMICOLON, ;><RETURN><CONST_INT, 0><SEMICOLON, ;><RCURL, }><ID, FILE><MULOP, *><ID, fin><ASSIGNOP, =><ID, fopen><LPAREN, (><ID, argv><LTHIRD, [><CONST_INT, 1><RTHIRD, ]><COMMA, ,><STRING, "r"><RPAREN, )><SEMICOLON, ;><IF><LPAREN, (><ID, fin><RELOP, ==><ID, NULL><RPAREN, )><LCURL, {><ID, printf><LPAREN, (><STRING, "Cannot open specified file
"><RPAREN, )><SEMICOLON, ;><RETURN><CONST_INT, 0><SEMICOLON, ;><RCURL, }><ID, yyin><ASSIGNOP, =><ID, fin><SEMICOLON, ;><ID, yylex><LPAREN, (><RPAREN, )><SEMICOLON, ;><ID, fprintf><LPAREN, (><ID, logout><COMMA, ,><STRING, "
Total Lines : %d
Total Errors : %d
"><COMMA, ,><ID, line_count><COMMA, ,><ID, error_count><RPAREN, )><SEMICOLON, ;><ID, fclose><LPAREN, (><ID, yyin><RPAREN, )><SEMICOLON, ;><ID, fclose><LPAREN, (><ID, tokenout><RPAREN, )><SEMICOLON, ;><ID, fclose><LPAREN, (><ID, logout><RPAREN, )><SEMICOLON, ;><RETURN><CONST_INT, 0><SEMICOLON, ;><RCURL, }><ID, pair><RELOP, <><ID, string><COMMA, ,><INT><RELOP, >><ID, ModifyString><LPAREN, (><ID, string><ID, s><COMMA, ,><INT><ID, line><RPAREN, )><LCURL, {><ID, string><ID, x><SEMICOLON, ;><FOR><LPAREN, (><INT><ID, i><ASSIGNOP, =><CONST_INT, 0><SEMICOLON, ;><ID, i><RELOP, <><ID, s><ID, size><LPAREN, (><RPAREN, )><SEMICOLON, ;><ID, i><INCOP, ++><RPAREN, )><LCURL, {><IF><LPAREN, (><ID, s><LTHIRD, [><ID, i><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\n'><RPAREN, )><ID, line><INCOP, ++><SEMICOLON, ;><IF><LPAREN, (><ID, s><LTHIRD, [><ID, i><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\\'><ID, and><ID, s><LTHIRD, [><ID, i><ADDOP, +><CONST_INT, 1><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\n'><RPAREN, )><CONTINUE><SEMICOLON, ;><INT><ID, ok><ASSIGNOP, =><CONST_INT, 0><SEMICOLON, ;><IF><LPAREN, (><ID, s><LTHIRD, [><ID, i><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\\'><ID, and><ID, s><LTHIRD, [><ID, i><ADDOP, +><CONST_INT, 1><RTHIRD, ]><RELOP, ==><CONST_CHAR, 'n'><RPAREN, )><ID, x><ID, push_back><LPAREN, (><CONST_CHAR, '\n'><RPAREN, )><SEMICOLON, ;><ELSE><IF><LPAREN, (><ID, s><LTHIRD, [><ID, i><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\\'><ID, and><ID, s><LTHIRD, [><ID, i><ADDOP, +><CONST_INT, 1><RTHIRD, ]><RELOP, ==><CONST_CHAR, 't'><RPAREN, )><ID, x><ID, push_back><LPAREN, (><CONST_CHAR, '\t'><RPAREN, )><SEMICOLON, ;><ELSE><IF><LPAREN, (><ID, s><LTHIRD, [><ID, i><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\\'><ID, and><ID, s><LTHIRD, [><ID, i><ADDOP, +><CONST_INT, 1><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\\'><RPAREN, )><ID, x><ID, push_back><LPAREN, (><CONST_CHAR, '\\'><RPAREN, )><SEMICOLON, ;><ELSE><IF><LPAREN, (><ID, s><LTHIRD, [><ID, i><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\\'><ID, and><ID, s><LTHIRD, [><ID, i><ADDOP, +><CONST_INT, 1><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\''><RPAREN, )><ID, x><ID, push_back><LPAREN, (><CONST_CHAR, '\''><RPAREN, )><SEMICOLON, ;><ELSE><IF><LPAREN, (><ID, s><LTHIRD, [><ID, i><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\\'><ID, and><ID, s><LTHIRD, [><ID, i><ADDOP, +><CONST_INT, 1><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\"'><RPAREN, )><ID, x><ID, push_back><LPAREN, (><CONST_CHAR, '\"'><RPAREN, )><SEMICOLON, ;><ELSE><IF><LPAREN, (><ID, s><LTHIRD, [><ID, i><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\\'><ID, and><ID, s><LTHIRD, [><ID, i><ADDOP, +><CONST_INT, 1><RTHIRD, ]><RELOP, ==><CONST_CHAR, 'a'><RPAREN, )><ID, x><ID, push_back><LPAREN, (><CONST_CHAR, '\a'><RPAREN, )><SEMICOLON, ;><ELSE><IF><LPAREN, (><ID, s><LTHIRD, [><ID, i><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\\'><ID, and><ID, s><LTHIRD, [><ID, i><ADDOP, +><CONST_INT, 1><RTHIRD, ]><RELOP, ==><CONST_CHAR, 'f'><RPAREN, )><ID, x><ID, push_back><LPAREN, (><CONST_CHAR, '\f'><RPAREN, )><SEMICOLON, ;><ELSE><IF><LPAREN, (><ID, s><LTHIRD, [><ID, i><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\\'><ID, and><ID, s><LTHIRD, [><ID, i><ADDOP, +><CONST_INT, 1><RTHIRD, ]><RELOP, ==><CONST_CHAR, 'r'><RPAREN, )><ID, x><ID, push_back><LPAREN, (><CONST_CHAR, '\r'><RPAREN, )><SEMICOLON, ;><ELSE><IF><LPAREN, (><ID, s><LTHIRD, [><ID, i><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\\'><ID, and><ID, s><LTHIRD, [><ID, i><ADDOP, +><CONST_INT, 1><RTHIRD, ]><RELOP, ==><CONST_CHAR, 'v'><RPAREN, )><ID, x><ID, push_back><LPAREN, (><CONST_CHAR, '\v'><RPAREN, )><SEMICOLON, ;><ELSE><IF><LPAREN, (><ID, s><LTHIRD, [><ID, i><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\\'><ID, and><ID, s><LTHIRD, [><ID, i><ADDOP, +><CONST_INT, 1><RTHIRD, ]><RELOP, ==><CONST_CHAR, 'b'><RPAREN, )><ID, x><ID, push_back><LPAREN, (><CONST_CHAR, '\b'><RPAREN, )><SEMICOLON, ;><ELSE><IF><LPAREN, (><ID, s><LTHIRD, [><ID, i><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\\'><ID, and><ID, s><LTHIRD, [><ID, i><ADDOP, +><CONST_INT, 1><RTHIRD, ]><RELOP, ==><RPAREN, )><ID, x><ID, push_back><LPAREN, (><RPAREN, )><SEMICOLON, ;><ELSE><IF><LPAREN, (><ID, s><LTHIRD, [><ID, i><RTHIRD, ]><RELOP, ==><CONST_CHAR, '\n'><RPAREN, )><CONTINUE><SEMICOLON, ;><ELSE><LCURL, {><ID, ok><ASSIGNOP, =><CONST_INT, 1><SEMICOLON, ;><ID, x><ID, push_back><LPAREN, (><ID, s><LTHIRD, [><ID, i><RTHIRD, ]><RPAREN, )><SEMICOLON, ;><RCURL, }><IF><LPAREN, (><ID, ok><RELOP, ==><CONST_INT, 0><RPAREN, )><ID, i><INCOP, ++><SEMICOLON, ;><RCURL, }><RETURN><ID, make_pair><LPAREN, (><ID, x><COMMA, ,><ID, line><RPAREN, )><SEMICOLON, ;><RCURL, }>